[{"path":"https://arttools.djnavarro.net/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 arttools authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://arttools.djnavarro.net/articles/arttools.html","id":"repository-paths","dir":"Articles","previous_headings":"","what":"Repository paths","title":"Generative art workflow","text":"first assumption generative art code system placed version control, lives git repository (e.g., GitHub). git repositories remote paths (GitHub) local paths (machine). help manage locations arttools convenience functions repo_remote_path() repo_local_path(). use , ’d something like .Rprofile file: Supposing generative art systems repositories called “series-cards” “series-boxes”, can build paths local copies like : Along lines, can get remote locations:","code":"options(   arttools.repos.remote = \"https://github.com/djnavarro\",   arttools.repos.local = \"/home/danielle/GitHub\" ) repo_local_path(\"series-cards\") repo_local_path(\"series-boxes\") #> /home/danielle/GitHub/series-cards #> /home/danielle/GitHub/series-boxes repo_remote_path(\"series-cards\") repo_remote_path(\"series-boxes\") #> [1] \"https://github.com/djnavarro/series-cards\" #> [1] \"https://github.com/djnavarro/series-boxes\""},{"path":"https://arttools.djnavarro.net/articles/arttools.html","id":"bucket-paths","dir":"Articles","previous_headings":"","what":"Bucket paths","title":"Generative art workflow","text":"second assumption image files created generative art system don’t belong git repository. ’s grossly typical create extremely large number images image files can rather large. Usually try avoid placing output files binary files version control! Instead ’ll use cloud storage bucket (case, Google Cloud Storage), helper functions manage paths: Local paths look like : Remote paths look like :","code":"options(   arttools.bucket.remote = \"https://storage.googleapis.com/djnavarro-art\",   arttools.bucket.local = \"/home/danielle/Buckets/djnavarro-art\" ) bucket_local_path(\"series-cards\") bucket_local_path(\"series-boxes\") #> /home/danielle/Buckets/djnavarro-art/series-cards #> /home/danielle/Buckets/djnavarro-art/series-boxes bucket_remote_path(\"series-cards\") bucket_remote_path(\"series-boxes\") #> [1] \"https://storage.googleapis.com/djnavarro-art/series-cards\" #> [1] \"https://storage.googleapis.com/djnavarro-art/series-boxes\""},{"path":"https://arttools.djnavarro.net/articles/arttools.html","id":"repository-name","dir":"Articles","previous_headings":"","what":"Repository name","title":"Generative art workflow","text":"Every system “system id” string sys_id repository name always series-[system identifier] Example, system name “subdivision” repo :","code":"series-subdivision"},{"path":"https://arttools.djnavarro.net/articles/arttools.html","id":"folder-structure","dir":"Articles","previous_headings":"","what":"Folder structure","title":"Generative art workflow","text":"Source code belongs source folder Output files belong output folder output folder one sub-folder per system version Build files belong build folder LICENSE file (probably CC--4.0)","code":""},{"path":"https://arttools.djnavarro.net/articles/arttools.html","id":"source-versioning","dir":"Articles","previous_headings":"","what":"Source versioning","title":"Generative art workflow","text":"beginning, assume ’ll iteratively modify system. , addition “system identifier” provides name system, “system version” string sys_ver. Use left-padded zeros, number sequentially: \"001\", \"002\", etc. (use three-digit strings : ’ve never gone 80 versions single system, three-digit code safe) Keep separate source files new version system, incrementing version number every time experiment something new:","code":"subdivision_001.R subdivision_002.R subdivision_003.R etc."},{"path":"https://arttools.djnavarro.net/articles/arttools.html","id":"seed-choice","dir":"Articles","previous_headings":"","what":"Seed choice","title":"Generative art workflow","text":"Use five-digit numbers seeds. ensure even extravagant situation generate large numbers output files, can ensure output files always sort numerical seed order length.","code":""},{"path":"https://arttools.djnavarro.net/articles/arttools.html","id":"output-file-names","dir":"Articles","previous_headings":"","what":"Output file names","title":"Generative art workflow","text":"Source files write image files output directory Every output file record RNG seed used produce Output files follow naming convention: example:","code":"[system]_[version]_[seed].[file extension] subdivision_012_22490.png"},{"path":"https://arttools.djnavarro.net/articles/arttools.html","id":"ignored-files","dir":"Articles","previous_headings":"","what":"Ignored files","title":"Generative art workflow","text":"output folder listed .gitignore committed separate “gallery” folder, also called series-[system identifier] used prepare files published. manual curation process, copying subset generated images output folder gallery folder. gallery folder also listed .gitignore.","code":""},{"path":"https://arttools.djnavarro.net/articles/arttools.html","id":"build-files","dir":"Articles","previous_headings":"","what":"Build files","title":"Generative art workflow","text":"build_previews.R: generates smaller-resolution preview images build_manifest.R: writes manifest.csv file gallery folder : Makefile handles build step, build step. ’s manage series-subdivision (whatever) folder, ’ve done manual curation step chosen image files published","code":""},{"path":"https://arttools.djnavarro.net/articles/arttools.html","id":"the-manifest-file","dir":"Articles","previous_headings":"","what":"The manifest file","title":"Generative art workflow","text":"csv file containing following fields: path: path image file (e.g., \"800/subdivision_012_22490.png\") resolution: image resolution pixels (square, use largest dimension) series: system name (e.g., \"subdivision\") sys_id: system version string (e.g, \"012\") img_id: image identifier, usually just seed (e.g. \"22490\") format: file extension (e.g., \"png\") date: publication date YYYY-MM-DD format (e.g. \"2023-06-02\") : Manifests also manifest_version field later change manifest format reader can work handle manifest inspecting field","code":""},{"path":"https://arttools.djnavarro.net/articles/arttools.html","id":"system-name-changes","dir":"Articles","previous_headings":"","what":"System name changes","title":"Generative art workflow","text":"’s grossly typical choose new name end process. Solution make “superficial ”. : Don’t rename source files Don’t rename system ids etc within source files Don’t rename output file : rename repository github (e.g., series-rectangles series-subdivision) rename gallery folder (, e.g., series-rectangles series-subdivision) Use new name _gallery.csv file ’s ideal, minimises mess, ultimately ensures thing gets published uses correct name art website github. also nice property preserving redirects github.","code":""},{"path":"https://arttools.djnavarro.net/articles/arttools.html","id":"publishing-images-to-cloud-storage","dir":"Articles","previous_headings":"","what":"Publishing images to cloud storage","title":"Generative art workflow","text":"Optional, desirable: move (copy) gallery folder ~/Bucket/djnavarro-art folder. Gallery folders properly belong object store rather git repo, might well reflected locally! publish gallery folder, copy djnavarro-art bucket google cloud storage using series-upload.sh script. instance: actual script:","code":"./series-upload.sh series-subdivision #! /bin/bash FOLDER=$1; gcloud storage cp $FOLDER gs://djnavarro-art --recursive --project generative-art-389407"},{"path":[]},{"path":"https://arttools.djnavarro.net/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Danielle Navarro. Author, maintainer.","code":""},{"path":"https://arttools.djnavarro.net/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Navarro D (2023). arttools: Tools Generative Art Workflows. https://github.com/djnavarro/arttools, http://djnavarro.net/arttools/.","code":"@Manual{,   title = {arttools: Tools For Generative Art Workflows},   author = {Danielle Navarro},   year = {2023},   note = {https://github.com/djnavarro/arttools, http://djnavarro.net/arttools/}, }"},{"path":"https://arttools.djnavarro.net/index.html","id":"arttools","dir":"","previous_headings":"","what":"Tools For Generative Art Workflows","title":"Tools For Generative Art Workflows","text":"personal package used help generative art workflows. ’s package help write code generative art systems: rather, ’s package use make easier maintain source code generative art system, output files created running code, organise images format suitable publishing web. reason writing something like ’ve making generative art long time (don’t tools help manage workflow) find ’ve ended hundreds art systems standardisation consistent structure, consequence can easily end tens thousands images organisation . makes difficult keep track ’ve created, even harder create portfolio website shows lovely creations world. arttools package attempt organise art workflows. ’m trying write fashion reasonably portable (people might theory able use ), moment goal modest: time ’m aiming systematise art workflows, ’s . Since personal package ’s CRAN likely never chance someone else wants tinker , package can installed github :","code":"remotes::install_github(\"djnavarro/arttools\")"},{"path":"https://arttools.djnavarro.net/reference/check.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the structure of a repository or series — check","title":"Check the structure of a repository or series — check","text":"Check structure repository series","code":""},{"path":"https://arttools.djnavarro.net/reference/check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the structure of a repository or series — check","text":"","code":"series_check(series, origin = bucket_local_path())  repo_check(series, origin = repo_local_path())"},{"path":"https://arttools.djnavarro.net/reference/check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the structure of a repository or series — check","text":"series Name series origin Location find series repository","code":""},{"path":"https://arttools.djnavarro.net/reference/check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the structure of a repository or series — check","text":"Invisibly returns TRUE checks pass, FALSE least one check fails","code":""},{"path":"https://arttools.djnavarro.net/reference/create_resized_images.html","id":null,"dir":"Reference","previous_headings":"","what":"Create resized copies of all images in a directory — create_resized_images","title":"Create resized copies of all images in a directory — create_resized_images","text":"Create resized copies images directory","code":""},{"path":"https://arttools.djnavarro.net/reference/create_resized_images.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create resized copies of all images in a directory — create_resized_images","text":"","code":"create_resized_images(   series,   images_from,   images_to,   pixels_wide,   pixels_high = pixels_wide,   origin = bucket_local_path() )"},{"path":"https://arttools.djnavarro.net/reference/create_resized_images.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create resized copies of all images in a directory — create_resized_images","text":"series Name series images_from Folder within series containing original images images_to Folder within series contain resized images pixels_wide Width output images pixels pixels_high Height output images pixels description origin Location find series","code":""},{"path":"https://arttools.djnavarro.net/reference/create_resized_images.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create resized copies of all images in a directory — create_resized_images","text":"Invisibly returns NULL. may change","code":""},{"path":"https://arttools.djnavarro.net/reference/manifest.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and write manifest files — manifest_read","title":"Read and write manifest files — manifest_read","text":"manifest series plain text file lists files contained within series.","code":""},{"path":"https://arttools.djnavarro.net/reference/manifest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and write manifest files — manifest_read","text":"","code":"manifest_read(series, origin = bucket_remote_path())  manifest_write(   series,   date = Sys.Date(),   origin = bucket_local_path(),   destination = bucket_local_path() )  manifest_build(series, date, origin = bucket_local_path())"},{"path":"https://arttools.djnavarro.net/reference/manifest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and write manifest files — manifest_read","text":"series Name series (e.g., \"series-rosemary\") origin Location find series date Publication date series (defaults current date) destination Location manifest written","code":""},{"path":"https://arttools.djnavarro.net/reference/manifest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and write manifest files — manifest_read","text":"Tibble containing manifest data, returned visibly user  manifest_read() manifest_build(), invisibly  manifest_write(). tibble contains one row per image file   series, following columns: series_name string series name (e.g., \"series-rosemary\") series_date contains publication date YYYY-MM-DD format path specifies path image (e.g., \"800/rosemary_001_1000_short-title.png\") folder specifies directory part path (e.g., \"800\") file_name specifies file name part path (e.g., \"rosemary_001_1000_short-title.png\") file_format specifies file format image (e.g., \"png\") system_name specifies generative art system name (e.g., \"rosemary\") system_version specifies generative art system version identifier (e.g., \"001\") image_id specifies identifier string image (e.g., \"1000\") image_short_title specifies short title image, NA (e.g., \"short-title\") image_long_title specifies long title image, NA (e.g., \"Long Title\") manifest_version specifies version manifest format used (currently always 1) manifest_read() manifest_build() returning   tibble thing . manifest_write() tibble   written csv file whose location specified using  destination argument.","code":""},{"path":"https://arttools.djnavarro.net/reference/manifest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read and write manifest files — manifest_read","text":"manifest file used document content published art   series, manifest_*() functions provide tools work   manifests minimum pain. typical workflow expected   follows. art series finalised images   written \"local bucket folder\", use manifest_write()   create manifest file within local series folder. done,   can upload completed series \"remote bucket folder\". Whenever need inspect contents now-online series, read   manifest file remote bucket using manifest_read().   example, can use programmatically construct HTML document   displays images series, calling manifest_read()   within code chunk quarto R markdown document. workflow one manifests constructed locally, published   remote, read remote location. reason,   default behaviour manifest_read() sets origin   bucket_remote_path(), whereas manifest_write() sets   origin destination bucket_local_path(). cases may convenient construct manifest tibble   series image files without writing csv file. end   also manifest_build() function .","code":""},{"path":"https://arttools.djnavarro.net/reference/paths.html","id":null,"dir":"Reference","previous_headings":"","what":"Paths to object buckets and repositories — bucket_remote_path","title":"Paths to object buckets and repositories — bucket_remote_path","text":"Paths object buckets repositories","code":""},{"path":"https://arttools.djnavarro.net/reference/paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Paths to object buckets and repositories — bucket_remote_path","text":"","code":"bucket_remote_path(...)  bucket_local_path(...)  repo_remote_path(...)  repo_local_path(...)"},{"path":"https://arttools.djnavarro.net/reference/paths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Paths to object buckets and repositories — bucket_remote_path","text":"... Names subfolders","code":""},{"path":"https://arttools.djnavarro.net/reference/paths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Paths to object buckets and repositories — bucket_remote_path","text":"Fully qualified path url","code":""},{"path":"https://arttools.djnavarro.net/reference/repo_create.html","id":null,"dir":"Reference","previous_headings":"","what":"Create new art repository — repo_create","title":"Create new art repository — repo_create","text":"Create new art repository","code":""},{"path":"https://arttools.djnavarro.net/reference/repo_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create new art repository — repo_create","text":"","code":"repo_create(   series,   destination = repo_local_path(),   remote = repo_remote_path(),   license = NULL )"},{"path":"https://arttools.djnavarro.net/reference/repo_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create new art repository — repo_create","text":"series Name series (e.g., \"series-rosemary\") destination Location repository folder created remote Location check pre-existing remote repository license License type series (\"ccby\", \"cc0\", \"mit\")","code":""},{"path":"https://arttools.djnavarro.net/reference/repo_create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create new art repository — repo_create","text":"Invisibly returns TRUE success, FALSE failure (may change)","code":""},{"path":"https://arttools.djnavarro.net/reference/series_download.html","id":null,"dir":"Reference","previous_headings":"","what":"Download an art series — series_download","title":"Download an art series — series_download","text":"Download art series","code":""},{"path":"https://arttools.djnavarro.net/reference/series_download.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download an art series — series_download","text":"","code":"series_download(   series,   destination = bucket_local_path(),   origin = bucket_remote_path() )"},{"path":"https://arttools.djnavarro.net/reference/series_download.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download an art series — series_download","text":"series Name series destination Local folder series folder downloaded origin Location find series","code":""},{"path":"https://arttools.djnavarro.net/reference/series_download.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download an art series — series_download","text":"Tibble containing download status data","code":""}]
