[{"path":"https://arttools.djnavarro.net/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 arttools authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://arttools.djnavarro.net/articles/creating-art.html","id":"assumptions-about-art-workflow","dir":"Articles","previous_headings":"","what":"Assumptions about art workflow","title":"Creating the art","text":"One thing ’ve learned years creating generative art systems “artistic workflow” subtly different “analytic workflow” adopt analysing data set, ’s different “developer workflow” adopt writing packages software. understand , ’s helpful understand ways art, analysis, packages differ goals. writing package, ’re aiming create one piece software. different versions software, course, add features, fix bugs, etc, don’t expect multiple versions package coexist within repository ! history development process relevant extent folks may working older versions package, might need install older version one reason another. Data analysis similar package development, quite . package development, ’re still aiming create one analysis (, often, collection analyses). history little important case often want trace path -called “garden forking paths” make sure ’re deluding validity analysis. might want keep copies interim analyses conducted – especially ’re exploratory analysis – ultimately hope ’ll end single authoritative version data analysis. Art … like . ’s little bit like exploratory data analysis ’s iterative process, – least experience – goal almost never create one “authoritative” version art system. ’s often true later versions system ones like best, art want publish end usually outputs later versions system, artistic process pure exploration way. don’t want lose old versions system: might want use later! workflow grossly typical creating art, ’s actually good thing end files source folder names like : defines subtly different variant art system, ’ve found practice want live together side--side source folder. trick, iteratively creating many versions system side side, helper functions help maintain discipline ensure different versions don’t interfere can always figure version system generated specific image! ’s common.R file comes handy: purpose common.R file source folder make easy maintain discipline without interrupting middle fun artistic parts.","code":"art-system_01.R art-system_02.R art-system_03.R etc"},{"path":"https://arttools.djnavarro.net/articles/creating-art.html","id":"the-common-functions","dir":"Articles","previous_headings":"","what":"The common functions","title":"Creating the art","text":"six functions defined common.R file. Two used make sure different versions art system don’t introduce inconsistencies: assert_version_consistency() function designed help avoid mistakes creating new version art system system_versions() function can call make mistake creating new version need figure version inconsistency happened also two functions helpful make sure images written correct location, correct file name: output_file() constructs file name output_path() constructs file path Finally two functions – tidy_int_string() tidy_name_string() – don’t actually need call within art code, used internally common.R functions. get sense use common.R functions within system ’s helpful walk code example system.","code":""},{"path":"https://arttools.djnavarro.net/articles/creating-art.html","id":"versioning-an-art-system","dir":"Articles","previous_headings":"","what":"Versioning an art system","title":"Creating the art","text":"structure almost every art system ’ve written – least ’ve done sensible way – pretty much every time: top file ’s lines code take care “administrative” tasks. bulk file devoted fun stuff: writing functions create generative art called. (Optionally) bottom file ’s code actually calls generative art functions creates art. Let’s look code forms “administrative” section art-system_01.R script. begins three lines: ’ve defined name generative art system, version system, image format used writing image files. Notice name version defined code consistent filename script: ’s called art-system_01.R, indeed name system defined \"art-system\" version number set 1. Whenever want create new version system, copy art-system_01.R art-system_02.R – almost always using “save ” menu option RStudio whatever IDE ’m using, kind thing worth terminal – update version number within code. consequence, first three lines art-system_02.R follows: name format don’t change, ’ve incremented version number appropriately. Now ’ve got new version system, can get fun part start tinkering generative art code! Unfortunately, ’s trap . ’m midst artistic process, ’m almost always thinking art, ’s easy forget increment value version. ’s problem (’ll see later), version number important. used make sure outputs different versions system given correct file names. Chaos can ensue version number wrong. common.R script comes handy, helper functions designed catch mistake. fourth line every art script imports functions common.R: avoid introducing unwanted dependencies, functions common.R written using base R, almost exclusively. ’s completely independent “arttools”, package required common.R functions work “” package. One functions supplied common.R assert_version_consistency(), scan file names source code make sure version numbers consistent. put crudely, function exists know ’m likely forget update version number, ’s really helpful art script throws error make mistake. , final line “administrative” section code looks like : version numbers fine, nothing happens. ’s problem, throws error. understand , can call system_versions() function – also supplied common.R – work going : output data frame three columns. file column specifies name source file, filename_version column contains version number extracted inspecting file name, source_version column contains version number extracted inspecting source code. case inconsistencies, assert_version_consistency() doesn’t throw error. , hand, source file name versions don’t match, duplicate entries, error. ’s boring thing , practice find ’s extremely useful call assert_version_consistency() start every art script, otherwise eventually mess something .","code":"name <- \"art-system\" version <- 1 format <- \"png\" name <- \"art-system\" version <- 2 format <- \"png\" source(here::here(\"source\", \"common.R\"), echo = FALSE) assert_version_consistency(name) system_versions(\"art-system\") #>              file filename_version source_version #> 1 art-system_01.R                1              1 #> 2 art-system_02.R                2              2"},{"path":"https://arttools.djnavarro.net/articles/creating-art.html","id":"naming-output-files","dir":"Articles","previous_headings":"","what":"Naming output files","title":"Creating the art","text":"writing generative art code, time spent artistic side. However, point process code write image file, – speaking experience – ’s easy get lazy point. Image files names \"image1.png\", \"image2.png\" aren’t informative, return system later won’t know recreate images. really want consistent system naming image files way allows look file name immediately know: art system created image? version art system created ? unique information (e.g. RNG seed) used create ? ’s goal, want name files way follows consistent scheme supplies information. ’s naming convention use: Notice three four parts already supplied “administrative header” art script: name, version, format variables defined beginning art-system_01.R art-system_02.R scripts, time comes create file name specific output generative art system variables already available us! id variable? part intentionally little vague, might well different every system, intention unique identifier string tells parameters used create image. generative art systems create, ’s one input parameter, namely RNG seed, id part filename simply integer value specifying RNG seed. make life easier, common.R file supplies output_file() function can call within generative art script create file name adheres rules. ’s example: Notice numeric parts name left-padded zeros. default output_file() create two-digit version number, assumption likely might make 10 versions specific system aren’t likely make 100 versions. Similarly, id input single number (presumably RNG seed), ’s padded zeros always four digit number assumption ’re probably going create 10000 outputs. ’s little bit syntactic sugar designed ensure file names sort correct order, often helpful later want create website showcasing work. Along lines, ’s worth noting constraints file names output_file() attempts enforce: uses _ separator different parts name uses - separator “words” within specific part allows . appear separator file name file extension replaces white space - principle shouldn’t necessary “course” ’re going try choose names wisely, practice ’ve messed many times ’ve found valuable write output_file() way tries enforce good names. give sense , ’s happens pass bad names: Obviously, don’t really want providing input like , … look, art. artistic process almost always involves fucking around finding , ’s valuable something place protect us worst excesses, yes?","code":"[name]_[version]_[id].[format] output_file(   name = \"art-system\",   version = 1,   id = 109,   format = \"png\" ) #> [1] \"art-system_01_0109.png\" output_file(   name = \"this... is a _very_ bad name\",   version = 1,   id = 109,   format = \".png\" ) #> [1] \"this-is-a-very-bad-name_01_0109.png\""},{"path":"https://arttools.djnavarro.net/articles/creating-art.html","id":"writing-output-files","dir":"Articles","previous_headings":"","what":"Writing output files","title":"Creating the art","text":"output_file() function handy thing available , practice ’re likely call output_path(), goes little creates complete path output file: cases function want call within generative art system, provides complete path location output file written. Writing files fashion ensures within output folder separate image folder every version system, every image within system named way allows accurately reconstruct came .","code":"output_path(\"art-system\", 1, 109, \"png\") #> [1] \"/tmp/RtmpIaxrLZ/temp_repos/system-fake/output/01/art-system_01_0109.png\""},{"path":"https://arttools.djnavarro.net/articles/creating-art.html","id":"putting-it-together","dir":"Articles","previous_headings":"","what":"Putting it together","title":"Creating the art","text":"discussion felt little abstract. ’ve talked entirely administrative aspects art process, ’s really boring. mind, might helpful – light discussion – take look complete source code art-system_01.R: can see, places “administrative” aspects intrude, many. practice, functions common.R don’t actually show much code. appear administrative header top script, parts code devoted writing output file. Otherwise, stay way let focus making art. course point.","code":"# set up ------------------------------------------------------------------  name <- \"art-system\" # only change this for an entirely new system version <- 1         # increment to 2 for \"my-art-system_02.R\", etc format <- \"png\"      # png is usually a good choice!  # define common helper functions source(here::here(\"source\", \"common.R\"), echo = FALSE)  # make sure we haven't accidentally messed up the versions assert_version_consistency(name)   # define the art system ---------------------------------------------------  art_generator <- function(seed) {    set.seed(seed)    # specify the output path and message the user   output <- output_path(name, version, seed, format)   message(\"generating art at \", output)    # generate high-level parameters for this piece   n <- sample(50:100, size = 1)   palette <- sample(colours(distinct = TRUE), 10)    # generate low-level details for this piece   x_coord <- sample(1:10, size = n, replace = TRUE)   y_coord <- sample(1:10, size = n, replace = TRUE)   size <- sample(2 * (1:5), size = n, replace = TRUE)   color <- sample(palette, size = n, replace = TRUE)   thickness <- sample(2 * (3:6), size = n, replace = TRUE)    # write the image   op <- par(mar = c(0, 0, 0, 0))   png(     filename = output,     width = 1000,     height = 1000,     units = \"px\",     bg = \"black\"   )   plot.new()   plot.window(xlim = c(0, 11), ylim = c(0, 11))   points(x = x_coord, y = y_coord, cex = size, col = color, lwd = thickness)   dev.off()   par(op) }   # make the art ------------------------------------------------------------  for(seed in 1:5) art_generator(seed)"},{"path":"https://arttools.djnavarro.net/articles/curating-art.html","id":"regarding-curation","dir":"Articles","previous_headings":"","what":"Regarding curation","title":"Curating the art","text":"Curation mostly manual process. Generative art systems don’t always create images find pleasing, see reason publish bad ones. ’s aesthetic want preserve publish generative art series, view “human loop” aspect manual curation important part artistic process. everyone agrees , years making generative art ’s ’ve ended . Given ethos, arttools implicitly assumes ’re going choose small subset uncurated images [local-repos]/series-fake/output folder copy [local-bucket]/series-fake folder. manually curated subset one want publish web. said, ’s nothing stopping copying every single output bucket publishing whole thing!","code":""},{"path":"https://arttools.djnavarro.net/articles/curating-art.html","id":"creating-the-curated-version","dir":"Articles","previous_headings":"","what":"Creating the curated version","title":"Curating the art","text":"Okay, let’s turn practicalities, assume ’ve chosen images like ’ve copied across series-fake local bucket folder. now something like local bucket: Notice curated version series-fake bucket, ’ve placed images image folder. reason – usually – images create generative art system high resolution, ’re going want low-res versions images can use “thumbnail” previews generative art website.","code":"#> /tmp/Rtmp0atc1X/temp_bucket/series-fake #> └── image #>     ├── art-system_01_0002.png #>     ├── art-system_01_0003.png #>     ├── art-system_02_0003.png #>     └── art-system_02_0005.png"},{"path":"https://arttools.djnavarro.net/articles/curating-art.html","id":"creating-thumbnail-images","dir":"Articles","previous_headings":"","what":"Creating thumbnail images","title":"Curating the art","text":"arttools package supplies function create thumbnails , boringly entitled create_resized_images(). bucket now contains “full resolution” images image folder, lower resolution versions images preview folder:","code":"create_resized_images(   series = \"series-fake\",   images_from = \"image\",   images_to = \"preview\",   pixels_wide = 500,   pixels_high = 500,   origin = bucket_local_path() ) #> ✔ /tmp/Rtmp0atc1X/temp_bucket/series-fake/preview/art-system_01_0002.png created #> ✔ /tmp/Rtmp0atc1X/temp_bucket/series-fake/preview/art-system_01_0003.png created #> ✔ /tmp/Rtmp0atc1X/temp_bucket/series-fake/preview/art-system_02_0003.png created #> ✔ /tmp/Rtmp0atc1X/temp_bucket/series-fake/preview/art-system_02_0005.png created #> /tmp/Rtmp0atc1X/temp_bucket/series-fake #> ├── image #> │   ├── art-system_01_0002.png #> │   ├── art-system_01_0003.png #> │   ├── art-system_02_0003.png #> │   └── art-system_02_0005.png #> └── preview #>     ├── art-system_01_0002.png #>     ├── art-system_01_0003.png #>     ├── art-system_02_0003.png #>     └── art-system_02_0005.png"},{"path":"https://arttools.djnavarro.net/articles/curating-art.html","id":"creating-manifest-files","dir":"Articles","previous_headings":"","what":"Creating manifest files","title":"Curating the art","text":"moment, series-fake bucket exists local folder, ’s easy enough inspect contents. However, goes online remote bucket, ’s easy list contents automatically. make life easier ’s helpful write manifest file lists files bucket. end, arttools package function called manifest_write() create file need: now manifest.csv file: ’s looks like: point nicely prepared folder full curated artwork can upload remote bucket.","code":"manifest_write(\"series-fake\") #> /tmp/Rtmp0atc1X/temp_bucket/series-fake #> ├── image #> │   ├── art-system_01_0002.png #> │   ├── art-system_01_0003.png #> │   ├── art-system_02_0003.png #> │   └── art-system_02_0005.png #> ├── manifest.csv #> └── preview #>     ├── art-system_01_0002.png #>     ├── art-system_01_0003.png #>     ├── art-system_02_0003.png #>     └── art-system_02_0005.png manifest_read(\"series-fake\", origin = bucket_local_path()) #> # A tibble: 8 × 12 #>   series_name series_date path          folder file_name file_format system_name #>   <chr>       <date>      <chr>         <chr>  <chr>     <chr>       <chr>       #> 1 series-fake 2023-07-28  image/art-sy… image  art-syst… png         art-system  #> 2 series-fake 2023-07-28  preview/art-… previ… art-syst… png         art-system  #> 3 series-fake 2023-07-28  image/art-sy… image  art-syst… png         art-system  #> 4 series-fake 2023-07-28  preview/art-… previ… art-syst… png         art-system  #> 5 series-fake 2023-07-28  image/art-sy… image  art-syst… png         art-system  #> 6 series-fake 2023-07-28  preview/art-… previ… art-syst… png         art-system  #> 7 series-fake 2023-07-28  image/art-sy… image  art-syst… png         art-system  #> 8 series-fake 2023-07-28  preview/art-… previ… art-syst… png         art-system  #> # ℹ 5 more variables: system_version <chr>, image_id <chr>, #> #   image_short_title <chr>, image_long_title <chr>, manifest_version <int>"},{"path":"https://arttools.djnavarro.net/articles/paths.html","id":"why-have-path-helper-functions","dir":"Articles","previous_headings":"","what":"Why have path helper functions?","title":"Managing repository and bucket paths","text":"assumption underpinning package generative art workflow something along lines. First write code defining generative art system, second (likely, concurrently) generate many image files using system. Next, want take subset images host online somewhere, can create art portfolio website displays images. time, ’re probably going end writing lots generative art systems end needing repeat cycle many time. ’s workflow mind, ’s helpful see every generative art system create four distinct “components” come : Source code, inputs define system Raw output images created system Curated images want share Webpage displays curated images components can (generally ) live different locations, can local copies remote copies. many art systems ’s really easy end mess inconsistent decisions things live, eventually makes life harder. helps take systematic approach. arttools package opinionated components structured. ’s surprising – ’s opinionated ’s designed personal workflow! live? Source code inputs live git repositories Raw output images ephemeral: exist local files Curated images want keep/share live cloud storage bucket ’ll talk portfolio website later article, assumption site exists merely hotlink curated images stored bucket: doesn’t store copies images . expectation lives anywhere normally store website. case, means art website lives git repository published using GitHub Pages, Netlify, something like . key point website completely separate thing art repositories storage bucket. case, thing want take away ’s helpful enforce structure things live. purpose helper functions make easy disciplined keep everything.","code":""},{"path":"https://arttools.djnavarro.net/articles/paths.html","id":"repository-paths","dir":"Articles","previous_headings":"","what":"Repository paths","title":"Managing repository and bucket paths","text":"first assumption generative art code system placed version control, lives git repository (e.g., GitHub). git repositories remote paths (GitHub) local paths (machine). help manage locations arttools convenience functions repo_remote_path() repo_local_path(). use , ’d something like .Rprofile file: Supposing generative art systems repositories called “series-cards” “series-boxes”, can build paths local copies like : Along lines, can get remote locations:","code":"options(   arttools.repos.remote = \"https://github.com/djnavarro\",   arttools.repos.local = \"/home/danielle/GitHub\" ) repo_local_path(\"series-cards\") repo_local_path(\"series-boxes\") #> /home/danielle/GitHub/series-cards #> /home/danielle/GitHub/series-boxes repo_remote_path(\"series-cards\") repo_remote_path(\"series-boxes\") #> [1] \"https://github.com/djnavarro/series-cards\" #> [1] \"https://github.com/djnavarro/series-boxes\""},{"path":"https://arttools.djnavarro.net/articles/paths.html","id":"bucket-paths","dir":"Articles","previous_headings":"","what":"Bucket paths","title":"Managing repository and bucket paths","text":"second assumption image files created generative art system don’t belong git repository. ’s grossly typical create extremely large number images image files can rather large. Usually try avoid placing output files binary files version control! Instead ’ll use cloud storage bucket (case, Google Cloud Storage), helper functions manage paths: Local paths look like : Remote paths look like :","code":"options(   arttools.bucket.remote = \"https://storage.googleapis.com/djnavarro-art\",   arttools.bucket.local = \"/home/danielle/Buckets/djnavarro-art\" ) bucket_local_path(\"series-cards\") bucket_local_path(\"series-boxes\") #> /home/danielle/Buckets/djnavarro-art/series-cards #> /home/danielle/Buckets/djnavarro-art/series-boxes bucket_remote_path(\"series-cards\") bucket_remote_path(\"series-boxes\") #> [1] \"https://storage.googleapis.com/djnavarro-art/series-cards\" #> [1] \"https://storage.googleapis.com/djnavarro-art/series-boxes\""},{"path":"https://arttools.djnavarro.net/articles/repositories.html","id":"repository-name","dir":"Articles","previous_headings":"","what":"Repository name","title":"Creating art repositories","text":"One first choices make setting new system choose name repository. arttools package doesn’t enforce naming system, personal experience ’ve learned ’s useful adopt consistent [prefix]-[system name] format. art repositories use “series” prefix, makes lot easier find GitHub later! example, generative art system called “cards”, repository name “series-cards”. time function arttools package takes series argument, ’d write series = \"series-cards\" something along lines. ’s nothing special using “series” prefix though. chose solely think generative art systems: ’re tools creating “art series”, seems make sense .","code":""},{"path":"https://arttools.djnavarro.net/articles/repositories.html","id":"repository-folder-structure","dir":"Articles","previous_headings":"","what":"Repository folder structure","title":"Creating art repositories","text":"can use repo_create() create skeleton local series repository. generative art system called “fake”, series name \"series-fake\". might use command like create skeleton: file tree creates: Note : writes .gitignore file ensure git won’t commit output files writes .file ensure ::() always work also note : doesn’t create RStudio project: use usethis::create_project() doesn’t initialise git repository: use usethis::use_git() doesn’t create remote GitHub: use usethis::use_github() two top-level files writes : README.md always created LICENSE.md created license specified four folders repository: source source code generative art system input input files used system (optional) build ancillary scripts part system (optional) output output files generated system (ignored git) Within source folder three files: source/common.R source/art-system_01.R source/art-system_02.R files define simple generative art system ’ll use discuss aspects generative art workflow another article.","code":"repo_create(series = \"series-fake\", license = \"ccby\") #> ✔ repository folder created at /tmp/Rtmp25110F/temp_repos/series-fake #> ✔ writing README.md #> ✔ writing LICENSE.md #> ✔ writing .gitignore #> ✔ writing .here #> ✔ creating folder 'source' #> ✔ creating folder 'input' #> ✔ creating folder 'output' #> ✔ creating folder 'build' #> ✔ writing example file 'source/common.R' #> ✔ writing example file 'source/art-system_01.R' #> ✔ writing example file 'source/art-system_02.R' #> /tmp/Rtmp25110F/temp_repos/series-fake #> ├── .gitignore #> ├── .here #> ├── LICENSE.md #> ├── README.md #> ├── build #> ├── input #> ├── output #> └── source #>     ├── art-system_01.R #>     ├── art-system_02.R #>     └── common.R"},{"path":"https://arttools.djnavarro.net/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Danielle Navarro. Author, maintainer.","code":""},{"path":"https://arttools.djnavarro.net/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Navarro D (2023). arttools: Tools Generative Art Workflows. https://github.com/djnavarro/arttools, http://djnavarro.net/arttools/.","code":"@Manual{,   title = {arttools: Tools For Generative Art Workflows},   author = {Danielle Navarro},   year = {2023},   note = {https://github.com/djnavarro/arttools, http://djnavarro.net/arttools/}, }"},{"path":"https://arttools.djnavarro.net/index.html","id":"arttools","dir":"","previous_headings":"","what":"Tools For Generative Art Workflows","title":"Tools For Generative Art Workflows","text":"personal package used help generative art workflows. ’s package help write code generative art systems: rather, ’s package use make easier maintain source code generative art system, output files created running code, organise images format suitable publishing web. reason writing something like ’ve making generative art long time (don’t tools help manage workflow) find ’ve ended hundreds art systems standardisation consistent structure, consequence can easily end tens thousands images organisation . makes difficult keep track ’ve created, even harder create portfolio website shows lovely creations world. arttools package attempt organise art workflows. ’m trying write fashion reasonably portable (people might theory able use ), moment goal modest: time ’m aiming systematise art workflows, ’s . Since personal package ’s CRAN likely never chance someone else wants tinker , package can installed github :","code":"remotes::install_github(\"djnavarro/arttools\")"},{"path":"https://arttools.djnavarro.net/reference/bucket_download.html","id":null,"dir":"Reference","previous_headings":"","what":"Download series from remote bucket — bucket_download","title":"Download series from remote bucket — bucket_download","text":"Download series remote bucket","code":""},{"path":"https://arttools.djnavarro.net/reference/bucket_download.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download series from remote bucket — bucket_download","text":"","code":"bucket_download(   series,   destination = bucket_local_path(),   origin = bucket_remote_path() )"},{"path":"https://arttools.djnavarro.net/reference/bucket_download.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download series from remote bucket — bucket_download","text":"series Name series destination Local folder series folder downloaded origin Location find series","code":""},{"path":"https://arttools.djnavarro.net/reference/bucket_download.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download series from remote bucket — bucket_download","text":"Tibble containing download status data","code":""},{"path":"https://arttools.djnavarro.net/reference/create_resized_images.html","id":null,"dir":"Reference","previous_headings":"","what":"Create resized copies of all images in a directory — create_resized_images","title":"Create resized copies of all images in a directory — create_resized_images","text":"Create resized copies images directory","code":""},{"path":"https://arttools.djnavarro.net/reference/create_resized_images.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create resized copies of all images in a directory — create_resized_images","text":"","code":"create_resized_images(   series,   images_from,   images_to,   pixels_wide,   pixels_high = pixels_wide,   origin = bucket_local_path() )"},{"path":"https://arttools.djnavarro.net/reference/create_resized_images.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create resized copies of all images in a directory — create_resized_images","text":"series Name series images_from Folder within series containing original images images_to Folder within series contain resized images pixels_wide Width output images pixels pixels_high Height output images pixels description origin Location find series","code":""},{"path":"https://arttools.djnavarro.net/reference/create_resized_images.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create resized copies of all images in a directory — create_resized_images","text":"Invisibly returns NULL. may change","code":""},{"path":"https://arttools.djnavarro.net/reference/manifest.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and write manifest files — manifest_read","title":"Read and write manifest files — manifest_read","text":"manifest series plain text file lists files contained within series.","code":""},{"path":"https://arttools.djnavarro.net/reference/manifest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and write manifest files — manifest_read","text":"","code":"manifest_read(series, origin = bucket_remote_path())  manifest_write(   series,   date = Sys.Date(),   origin = bucket_local_path(),   destination = bucket_local_path() )  manifest_build(series, date, origin = bucket_local_path())"},{"path":"https://arttools.djnavarro.net/reference/manifest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and write manifest files — manifest_read","text":"series Name series (e.g., \"series-rosemary\") origin Location find series date Publication date series (defaults current date) destination Location manifest written","code":""},{"path":"https://arttools.djnavarro.net/reference/manifest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and write manifest files — manifest_read","text":"Tibble containing manifest data, returned visibly user  manifest_read() manifest_build(), invisibly  manifest_write(). tibble contains one row per image file   series, following columns: series_name string series name (e.g., \"series-rosemary\") series_date contains publication date YYYY-MM-DD format path specifies path image (e.g., \"800/rosemary_001_1000_short-title.png\") folder specifies directory part path (e.g., \"800\") file_name specifies file name part path (e.g., \"rosemary_001_1000_short-title.png\") file_format specifies file format image (e.g., \"png\") system_name specifies generative art system name (e.g., \"rosemary\") system_version specifies generative art system version identifier (e.g., \"001\") image_id specifies identifier string image (e.g., \"1000\") image_short_title specifies short title image, NA (e.g., \"short-title\") image_long_title specifies long title image, NA (e.g., \"Long Title\") manifest_version specifies version manifest format used (currently always 1) manifest_read() manifest_build() returning   tibble thing . manifest_write() tibble   written csv file whose location specified using  destination argument.","code":""},{"path":"https://arttools.djnavarro.net/reference/manifest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read and write manifest files — manifest_read","text":"manifest file used document content published art   series, manifest_*() functions provide tools work   manifests minimum pain. typical workflow expected   follows. art series finalised images   written \"local bucket folder\", use manifest_write()   create manifest file within local series folder. done,   can upload completed series \"remote bucket folder\". Whenever need inspect contents now-online series, read   manifest file remote bucket using manifest_read().   example, can use programmatically construct HTML document   displays images series, calling manifest_read()   within code chunk quarto R markdown document. workflow one manifests constructed locally, published   remote, read remote location. reason,   default behaviour manifest_read() sets origin   bucket_remote_path(), whereas manifest_write() sets   origin destination bucket_local_path(). cases may convenient construct manifest tibble   series image files without writing csv file. end   also manifest_build() function .","code":""},{"path":"https://arttools.djnavarro.net/reference/paths.html","id":null,"dir":"Reference","previous_headings":"","what":"Paths to object buckets and repositories — bucket_remote_path","title":"Paths to object buckets and repositories — bucket_remote_path","text":"Paths object buckets repositories","code":""},{"path":"https://arttools.djnavarro.net/reference/paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Paths to object buckets and repositories — bucket_remote_path","text":"","code":"bucket_remote_path(...)  bucket_local_path(...)  repo_remote_path(...)  repo_local_path(...)"},{"path":"https://arttools.djnavarro.net/reference/paths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Paths to object buckets and repositories — bucket_remote_path","text":"... Names subfolders","code":""},{"path":"https://arttools.djnavarro.net/reference/paths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Paths to object buckets and repositories — bucket_remote_path","text":"Fully qualified path url","code":""},{"path":"https://arttools.djnavarro.net/reference/repo_create.html","id":null,"dir":"Reference","previous_headings":"","what":"Create new art repository — repo_create","title":"Create new art repository — repo_create","text":"Create new art repository","code":""},{"path":"https://arttools.djnavarro.net/reference/repo_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create new art repository — repo_create","text":"","code":"repo_create(   series,   license = NULL,   destination = repo_local_path(),   remote = repo_remote_path() )"},{"path":"https://arttools.djnavarro.net/reference/repo_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create new art repository — repo_create","text":"series Name series (e.g., \"series-rosemary\") license License type series (\"ccby\", \"cc0\", \"mit\") destination Location repository folder created remote Location check pre-existing remote repository","code":""},{"path":"https://arttools.djnavarro.net/reference/repo_create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create new art repository — repo_create","text":"Invisibly returns TRUE success, FALSE failure (may change)","code":""},{"path":"https://arttools.djnavarro.net/reference/status.html","id":null,"dir":"Reference","previous_headings":"","what":"Status of a repository or bucket — status","title":"Status of a repository or bucket — status","text":"Status repository bucket","code":""},{"path":"https://arttools.djnavarro.net/reference/status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Status of a repository or bucket — status","text":"","code":"bucket_status(series, origin = bucket_local_path())  repo_status(series, origin = repo_local_path())"},{"path":"https://arttools.djnavarro.net/reference/status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Status of a repository or bucket — status","text":"series Name series origin Location find bucket repository folder","code":""},{"path":"https://arttools.djnavarro.net/reference/status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Status of a repository or bucket — status","text":"Invisibly returns TRUE problems detected, FALSE otherwise","code":""}]
